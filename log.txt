Loading Database object from data/relbench/rel-f1/db...
Done in 0.11 seconds.
type(batch): <class 'torch_geometric.data.hetero_data.HeteroData'>
batch edge_index_dict: {('constructor_results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'f2p_circuitId', 'circuits'): tensor([], size=(2, 0), dtype=torch.int64), ('circuits', 'rev_f2p_circuitId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'standings'): tensor([[    0,     1,     2,  ..., 20226, 20227, 20228],
        [    0,     1,     2,  ..., 20226, 20227, 20228]]), ('standings', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 20226, 20227, 20228],
        [    0,     0,     0,  ...,   510,   510,   510]]), ('drivers', 'rev_f2p_driverId', 'standings'): tensor([[    0,     0,     0,  ...,   510,   510,   510],
        [    0,     1,     2,  ..., 20226, 20227, 20228]]), ('results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'results'): tensor([[    0,     1,     2,  ..., 20224, 20225, 20226],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('results', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 17673, 17674, 17675],
        [    0,     0,     0,  ...,   510,   510,   510]]), ('drivers', 'rev_f2p_driverId', 'results'): tensor([[    0,     0,     0,  ...,   510,   510,   510],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'results'): tensor([[    0,     0,     0,  ...,  1324,  1324,  1324],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('qualifying', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'qualifying'): tensor([[  254,   258,   259,  ..., 19421, 19423, 19424],
        [    0,     1,     2,  ...,  1724,  1725,  1726]]), ('qualifying', 'f2p_driverId', 'drivers'): tensor([[   0,    1,    2,  ..., 1724, 1725, 1726],
        [   6,    6,    6,  ...,  488,  488,  488]]), ('drivers', 'rev_f2p_driverId', 'qualifying'): tensor([[   6,    6,    6,  ...,  488,  488,  488],
        [   0,    1,    2,  ..., 1724, 1725, 1726]]), ('qualifying', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'qualifying'): tensor([[  15,   15,   15,  ..., 1274, 1274, 1274],
        [   0,    1,    2,  ..., 1724, 1725, 1726]]), ('constructor_standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_standings', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64)}
batch_scuffed: HeteroData(
  edge_index_dict={
    (constructor_results, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, constructor_results)=[2, 0],
    (constructor_results, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, constructor_results)=[2, 0],
    (races, f2p_circuitId, circuits)=[2, 0],
    (circuits, rev_f2p_circuitId, races)=[2, 0],
    (standings, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, standings)=[2, 20229],
    (standings, f2p_driverId, drivers)=[2, 20229],
    (drivers, rev_f2p_driverId, standings)=[2, 20229],
    (results, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, results)=[2, 17676],
    (results, f2p_driverId, drivers)=[2, 17676],
    (drivers, rev_f2p_driverId, results)=[2, 17676],
    (results, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, results)=[2, 17676],
    (qualifying, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, qualifying)=[2, 1724],
    (qualifying, f2p_driverId, drivers)=[2, 1727],
    (drivers, rev_f2p_driverId, qualifying)=[2, 1727],
    (qualifying, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, qualifying)=[2, 1727],
    (constructor_standings, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, constructor_standings)=[2, 0],
    (constructor_standings, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, constructor_standings)=[2, 0],
  },
  _global_store={},
  _node_store_dict={
    constructor_results={
      tf=TensorFrame([0, 2]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    drivers={
      tf=TensorFrame([512, 6]),
      n_id=[512],
      batch=[512],
      num_sampled_nodes=[3],
      input_id=[512],
      seed_time=[512],
      batch_size=512,
      y=[512],
    },
    races={
      tf=TensorFrame([21321, 5]),
      time=[21321],
      n_id=[21321],
      batch=[21321],
      num_sampled_nodes=[3],
    },
    standings={
      tf=TensorFrame([20229, 4]),
      time=[20229],
      n_id=[20229],
      batch=[20229],
      num_sampled_nodes=[3],
    },
    results={
      tf=TensorFrame([17676, 11]),
      time=[17676],
      n_id=[17676],
      batch=[17676],
      num_sampled_nodes=[3],
    },
    constructors={
      tf=TensorFrame([1326, 3]),
      n_id=[1326],
      batch=[1326],
      num_sampled_nodes=[3],
    },
    qualifying={
      tf=TensorFrame([1727, 3]),
      time=[1727],
      n_id=[1727],
      batch=[1727],
      num_sampled_nodes=[3],
    },
    constructor_standings={
      tf=TensorFrame([0, 4]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    circuits={
      tf=TensorFrame([0, 7]),
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
  },
  _edge_store_dict={
    (constructor_results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, f2p_circuitId, circuits)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (circuits, rev_f2p_circuitId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, standings)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (standings, f2p_driverId, drivers)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, standings)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (results, f2p_driverId, drivers)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, qualifying)={
      edge_index=[2, 1724],
      e_id=[1724],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_driverId, drivers)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, qualifying)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, qualifying)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
  }
)
batch: HeteroData(
  constructor_results={
    tf=TensorFrame([0, 2]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  drivers={
    tf=TensorFrame([512, 6]),
    n_id=[512],
    batch=[512],
    num_sampled_nodes=[3],
    input_id=[512],
    seed_time=[512],
    batch_size=512,
    y=[512],
  },
  races={
    tf=TensorFrame([21321, 5]),
    time=[21321],
    n_id=[21321],
    batch=[21321],
    num_sampled_nodes=[3],
  },
  standings={
    tf=TensorFrame([20229, 4]),
    time=[20229],
    n_id=[20229],
    batch=[20229],
    num_sampled_nodes=[3],
  },
  results={
    tf=TensorFrame([17676, 11]),
    time=[17676],
    n_id=[17676],
    batch=[17676],
    num_sampled_nodes=[3],
  },
  constructors={
    tf=TensorFrame([1326, 3]),
    n_id=[1326],
    batch=[1326],
    num_sampled_nodes=[3],
  },
  qualifying={
    tf=TensorFrame([1727, 3]),
    time=[1727],
    n_id=[1727],
    batch=[1727],
    num_sampled_nodes=[3],
  },
  constructor_standings={
    tf=TensorFrame([0, 4]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  circuits={
    tf=TensorFrame([0, 7]),
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  (constructor_results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, f2p_circuitId, circuits)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (circuits, rev_f2p_circuitId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, standings)={
    edge_index=[2, 20229],
    e_id=[20229],
    num_sampled_edges=[2],
  },
  (standings, f2p_driverId, drivers)={
    edge_index=[2, 20229],
    e_id=[20229],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, standings)={
    edge_index=[2, 20229],
    e_id=[20229],
    num_sampled_edges=[2],
  },
  (results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, results)={
    edge_index=[2, 17676],
    e_id=[17676],
    num_sampled_edges=[2],
  },
  (results, f2p_driverId, drivers)={
    edge_index=[2, 17676],
    e_id=[17676],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, results)={
    edge_index=[2, 17676],
    e_id=[17676],
    num_sampled_edges=[2],
  },
  (results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, results)={
    edge_index=[2, 17676],
    e_id=[17676],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, qualifying)={
    edge_index=[2, 1724],
    e_id=[1724],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_driverId, drivers)={
    edge_index=[2, 1727],
    e_id=[1727],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, qualifying)={
    edge_index=[2, 1727],
    e_id=[1727],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, qualifying)={
    edge_index=[2, 1727],
    e_id=[1727],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  }
)
batch_scuffed: HeteroData(
  edge_index_dict={
    (constructor_results, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, constructor_results)=[2, 0],
    (constructor_results, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, constructor_results)=[2, 0],
    (races, f2p_circuitId, circuits)=[2, 0],
    (circuits, rev_f2p_circuitId, races)=[2, 0],
    (standings, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, standings)=[2, 20229],
    (standings, f2p_driverId, drivers)=[2, 20229],
    (drivers, rev_f2p_driverId, standings)=[2, 20229],
    (results, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, results)=[2, 17676],
    (results, f2p_driverId, drivers)=[2, 17676],
    (drivers, rev_f2p_driverId, results)=[2, 17676],
    (results, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, results)=[2, 17676],
    (qualifying, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, qualifying)=[2, 1724],
    (qualifying, f2p_driverId, drivers)=[2, 1727],
    (drivers, rev_f2p_driverId, qualifying)=[2, 1727],
    (qualifying, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, qualifying)=[2, 1727],
    (constructor_standings, f2p_raceId, races)=[2, 0],
    (races, rev_f2p_raceId, constructor_standings)=[2, 0],
    (constructor_standings, f2p_constructorId, constructors)=[2, 0],
    (constructors, rev_f2p_constructorId, constructor_standings)=[2, 0],
  },
  _global_store={},
  _node_store_dict={
    constructor_results={
      tf=TensorFrame([0, 2]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    drivers={
      tf=TensorFrame([512, 6]),
      n_id=[512],
      batch=[512],
      num_sampled_nodes=[3],
      input_id=[512],
      seed_time=[512],
      batch_size=512,
      y=[512],
    },
    races={
      tf=TensorFrame([21321, 5]),
      time=[21321],
      n_id=[21321],
      batch=[21321],
      num_sampled_nodes=[3],
    },
    standings={
      tf=TensorFrame([20229, 4]),
      time=[20229],
      n_id=[20229],
      batch=[20229],
      num_sampled_nodes=[3],
    },
    results={
      tf=TensorFrame([17676, 11]),
      time=[17676],
      n_id=[17676],
      batch=[17676],
      num_sampled_nodes=[3],
    },
    constructors={
      tf=TensorFrame([1326, 3]),
      n_id=[1326],
      batch=[1326],
      num_sampled_nodes=[3],
    },
    qualifying={
      tf=TensorFrame([1727, 3]),
      time=[1727],
      n_id=[1727],
      batch=[1727],
      num_sampled_nodes=[3],
    },
    constructor_standings={
      tf=TensorFrame([0, 4]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    circuits={
      tf=TensorFrame([0, 7]),
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
  },
  _edge_store_dict={
    (constructor_results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, f2p_circuitId, circuits)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (circuits, rev_f2p_circuitId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, standings)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (standings, f2p_driverId, drivers)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, standings)={
      edge_index=[2, 20229],
      e_id=[20229],
      num_sampled_edges=[2],
    },
    (results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (results, f2p_driverId, drivers)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, results)={
      edge_index=[2, 17676],
      e_id=[17676],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, qualifying)={
      edge_index=[2, 1724],
      e_id=[1724],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_driverId, drivers)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, qualifying)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, qualifying)={
      edge_index=[2, 1727],
      e_id=[1727],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
  }
)
hetero edge_index: {('constructor_results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'f2p_circuitId', 'circuits'): tensor([], size=(2, 0), dtype=torch.int64), ('circuits', 'rev_f2p_circuitId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'standings'): tensor([[    0,     1,     2,  ..., 20226, 20227, 20228],
        [    0,     1,     2,  ..., 20226, 20227, 20228]]), ('standings', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 20226, 20227, 20228],
        [    0,     0,     0,  ...,   510,   510,   510]]), ('drivers', 'rev_f2p_driverId', 'standings'): tensor([[    0,     0,     0,  ...,   510,   510,   510],
        [    0,     1,     2,  ..., 20226, 20227, 20228]]), ('results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'results'): tensor([[    0,     1,     2,  ..., 20224, 20225, 20226],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('results', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 17673, 17674, 17675],
        [    0,     0,     0,  ...,   510,   510,   510]]), ('drivers', 'rev_f2p_driverId', 'results'): tensor([[    0,     0,     0,  ...,   510,   510,   510],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'results'): tensor([[    0,     0,     0,  ...,  1324,  1324,  1324],
        [    0,     1,     2,  ..., 17673, 17674, 17675]]), ('qualifying', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'qualifying'): tensor([[  254,   258,   259,  ..., 19421, 19423, 19424],
        [    0,     1,     2,  ...,  1724,  1725,  1726]]), ('qualifying', 'f2p_driverId', 'drivers'): tensor([[   0,    1,    2,  ..., 1724, 1725, 1726],
        [   6,    6,    6,  ...,  488,  488,  488]]), ('drivers', 'rev_f2p_driverId', 'qualifying'): tensor([[   6,    6,    6,  ...,  488,  488,  488],
        [   0,    1,    2,  ..., 1724, 1725, 1726]]), ('qualifying', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'qualifying'): tensor([[  15,   15,   15,  ..., 1274, 1274, 1274],
        [   0,    1,    2,  ..., 1724, 1725, 1726]]), ('constructor_standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_standings', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64)}
('races', 'rev_f2p_raceId', 'standings')
('standings', 'f2p_driverId', 'drivers')
('drivers', 'rev_f2p_driverId', 'standings')
('races', 'rev_f2p_raceId', 'results')
('results', 'f2p_driverId', 'drivers')
('drivers', 'rev_f2p_driverId', 'results')
('constructors', 'rev_f2p_constructorId', 'results')
('races', 'rev_f2p_raceId', 'qualifying')
('qualifying', 'f2p_driverId', 'drivers')
('drivers', 'rev_f2p_driverId', 'qualifying')
('constructors', 'rev_f2p_constructorId', 'qualifying')
