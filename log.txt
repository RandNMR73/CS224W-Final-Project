Loading Database object from data/relbench/rel-f1/db...
Done in 0.10 seconds.
type(batch): <class 'torch_geometric.data.hetero_data.HeteroData'>
batch edge_index_dict: {('constructor_results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'f2p_circuitId', 'circuits'): tensor([], size=(2, 0), dtype=torch.int64), ('circuits', 'rev_f2p_circuitId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'standings'): tensor([[    0,     1,     2,  ..., 21544, 21545, 21546],
        [    0,     1,     2,  ..., 21544, 21545, 21546]]), ('standings', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 21544, 21545, 21546],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'standings'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 21544, 21545, 21546]]), ('results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'results'): tensor([[    0,     1,     2,  ..., 21531, 21532, 21533],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), ('results', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 19310, 19311, 19312],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'results'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), ('results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'results'): tensor([[    0,     0,     0,  ...,  1314,  1314,  1315],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), ('qualifying', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'qualifying'): tensor([[  947,   950,  1687,  ..., 21372, 21388, 21390],
        [    0,     1,     2,  ...,  1799,  1800,  1801]]), ('qualifying', 'f2p_driverId', 'drivers'): tensor([[   0,    1,    2,  ..., 1799, 1800, 1801],
        [  19,   19,   38,  ...,  505,  505,  505]]), ('drivers', 'rev_f2p_driverId', 'qualifying'): tensor([[  19,   19,   38,  ...,  505,  505,  505],
        [   0,    1,    2,  ..., 1799, 1800, 1801]]), ('qualifying', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'qualifying'): tensor([[  60,   60,  112,  ..., 1302, 1302, 1302],
        [   0,    1,    2,  ..., 1799, 1800, 1801]]), ('constructor_standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_standings', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64)}
attributes: {'_edge_attr_cls': <class 'torch_geometric.data.graph_store.EdgeAttr'>, '_tensor_attr_cls': <class 'torch_geometric.data.feature_store.TensorAttr'>, '_global_store': {}, '_node_store_dict': {'constructor_results': {'tf': TensorFrame(
  num_cols=2,
  num_rows=0,
  numerical (1): ['points'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([], dtype=torch.int64), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}, 'drivers': {'tf': TensorFrame(
  num_cols=6,
  num_rows=512,
  timestamp (1): ['dob'],
  embedding (5): ['code', 'driverRef', 'forename', 'nationality', 'surname'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([476,  57, 206, 554, 434, 181, 109, 177, 626, 288, 540, 234, 186, 173,
        157, 169,  93, 218, 660,  30, 403, 494, 199, 136, 196, 474,  54, 342,
        458,  90, 135, 620, 186, 136, 686, 270, 456,  94,  56, 221, 643, 359,
        538, 432, 459, 388,  29,  62, 236, 581, 223, 122, 229, 651,  64, 319,
        176, 139, 561, 207, 706,  34, 245, 184, 419, 176, 804, 363,  56, 208,
         12,  55, 104, 558, 201, 534, 205, 171, 104, 314, 118, 198, 429, 448,
        116, 249,  54, 127, 156, 229,  51, 554, 612, 118,  34, 400, 359, 186,
        708,  58, 117,  54, 395, 245, 206, 157,  44, 482, 340, 205, 288,  16,
         14,  14, 314, 137,  62,  43, 229, 581, 251, 221, 763,  86, 344, 648,
        173, 632, 101, 174,  76, 627, 159, 116,  70, 118, 101, 136, 577, 533,
        305, 230, 186, 359, 229, 426, 126, 116, 628,  54, 181, 651, 231, 514,
        117, 615,  70, 357, 104, 226, 221, 230, 139, 475,  40, 121, 327, 220,
        501, 196, 162, 116, 627, 277, 181,  87, 547, 232,  88,  14, 373,  93,
         20, 403, 144, 263, 178, 327,  90, 310, 232, 279, 346, 220, 479,  41,
         34,  55, 220,  98,  93, 157, 551, 223, 238, 104,  56, 174, 186, 396,
         54, 113, 162, 660, 118, 479,  34, 222, 223, 220,  36, 633, 237, 656,
        292,  56,  34, 426,  83,   1, 122,  86, 107, 686, 221, 327, 202, 101,
        181, 157, 230, 204, 198, 541, 264, 224, 338, 645,  86,  83, 642, 231,
        155, 175,  29, 196,  36, 122,  89, 304, 351, 210,  36, 118, 207,  48,
        308,  83,  80, 184, 177, 426, 116, 203, 196, 526, 201, 116, 175, 104,
        127, 172, 441, 453, 171, 117, 627, 171, 765,  50,  20, 577,  21, 465,
         12,  44, 779, 221, 109, 230,  94, 174, 722,  77,  69, 513, 402, 475,
        234, 138, 205, 220, 124, 137, 161, 206, 144, 186, 690, 554, 288,  83,
        303, 187, 178, 697,  22, 617,  63, 189, 234, 118, 426, 117, 525, 355,
        116, 171, 403, 251, 657, 340, 207,   7, 476, 429, 220, 198, 109,  29,
         91, 529, 419,  21, 237, 710, 148, 111,  84,  99,  83, 313, 220, 518,
        104, 230, 606,  12, 350, 162, 707,  24,  56, 346, 199,  22, 372, 735,
        221, 506, 782, 360, 426,  56, 188, 210, 104, 234, 397, 186, 289, 158,
        108, 101, 249, 647, 220, 162, 554, 655, 270, 159, 404, 384, 208, 374,
         30, 306,  91, 118, 230, 193, 355, 372, 101,  56, 199, 211, 199, 349,
         76, 221, 172, 199, 403, 528,  62, 484, 207, 352, 501,  47, 283, 109,
        763, 143, 535, 355, 231, 206,  98,  48, 663,  93, 202, 116, 632,  56,
        345, 122, 206,  55, 451, 478, 433, 206, 111, 226, 223, 658, 139, 593,
         48,  87, 344, 344, 118, 666, 505, 100, 302, 196, 424, 340, 455,  89,
        346, 526, 246,  21, 102, 196, 108, 773, 132,  49, 357, 178, 306, 249,
        206, 220, 305, 148, 403,   3,  94, 439, 255, 640, 181, 303, 580, 563,
        501,  22, 379, 645, 384, 733, 171, 177]), 'batch': tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
        154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
        168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
        196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
        210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
        238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
        280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
        294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
        308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
        322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
        336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
        350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
        378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
        392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
        406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
        420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
        434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
        448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
        462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
        476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
        490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
        504, 505, 506, 507, 508, 509, 510, 511]), 'num_sampled_nodes': [512, 0, 0], 'input_id': tensor([3124, 7040, 3483, 5537, 2689, 3016, 5199, 7180, 2763, 1269, 4125,  688,
        1198, 5749, 1539, 1577,  122, 7190, 1846, 6087, 3609, 5464,  195, 1987,
        3474, 4106,  548, 1214, 3144, 3795, 4859, 6909, 5855, 5308, 1399, 3004,
        1391, 4374,   29, 6286, 6951, 6871, 6901, 1740, 5461, 1725, 3848,  991,
        4442, 6938, 3044,  137, 2564, 3681,  129, 5868, 6236, 2957, 5978, 6982,
        4628, 3264,  238, 2041, 1749, 2052, 7416, 4062, 6537, 2774, 2800, 3781,
        2032,  400, 6709,  389,  199, 5370, 7146, 3993, 6285, 3023, 3169, 5524,
         149, 7271,  128, 5234, 6199, 6776, 1432, 5990, 2703, 2060,  534, 2658,
         297, 2149,  466, 5136, 4754,  587, 1266, 3961, 1652, 5795, 1903, 2685,
        3115, 2542, 3663, 5160, 1912,   38, 1671, 2445, 1894, 1477, 5412, 2715,
        6785, 5854, 1864, 1472, 5478, 3202, 2927,  417, 3812, 6265, 4824, 3215,
        4839, 2464, 1458, 6623, 3821, 3510, 5993, 7396, 7307, 6325,  706, 5421,
         724, 6430, 5227, 1956, 5545, 5632, 6332, 1830, 2988, 2698, 6243, 5510,
        4713, 2628, 1051, 5319, 1140, 1188, 1126, 1356, 6539, 7118, 1258,  258,
        2694, 3949, 2040, 5698, 6474, 6817, 2093, 4333, 4590, 1631, 1475, 6090,
        2207,  166, 2830, 4557, 3869, 5842, 2468, 1252, 7069, 4472, 3495, 5394,
         375, 4433, 3149, 5126, 3260, 1447, 2103, 4297, 2475, 5299, 2305,  707,
        2127, 1559,   45, 1574, 7176,  792, 7015, 5718, 6685, 5557, 1533, 4556,
        4244, 3980, 4955,  743, 5152, 6932, 3010, 5544,  289, 4743, 3287, 6435,
        1005,  930, 2403,  995, 4736, 5109, 4446, 2594, 5325, 6660,  659, 4832,
        5809, 4405, 5800, 7376, 6317, 1175,  298, 4616, 4294, 1971, 7402, 7226,
        1558, 1077, 4320, 3499,  937,  613,  189, 1666, 6350, 2107, 4674, 5327,
        4202, 4230, 3077,   83, 5676, 2023, 2521, 6959,  196, 1115,  689, 6504,
        6703, 5261, 4865,   88, 1522, 5837, 2660,  810, 5332, 3396, 6463, 7240,
        5104, 3731, 1433, 3680, 5173, 4646, 5591, 3755, 1400, 2972, 5727, 4885,
        1025, 6207,  456, 7104, 4737,  402, 3654, 1814, 2535, 2872, 2077, 5352,
         559,  100, 3376, 3466, 4330, 3910,  474,  857, 4476,  564, 2154, 1096,
         175, 1416, 1888, 3669, 2821, 2944, 5411, 4444, 3619, 7127,  430, 3228,
        2484, 4910, 3150, 3966, 2290, 3622,  925, 7000, 5492, 5013, 1165, 2517,
        1024, 5193, 1002, 4176, 4521, 5129, 4980, 6041, 5239, 4314, 7062, 5236,
        3345,  307, 3477, 4194,  162,  229,  414, 1425, 7284, 5291, 3693, 4716,
        4256, 3066, 4381, 1423, 4526, 7424, 2547, 3178, 5098,  330,  887, 3349,
        2937, 6745, 5312, 6275, 4112, 2577, 4958, 3413, 6134, 3870,  268, 1813,
        2582, 2966,  868,  449, 4908, 5753, 1278, 4539, 1419, 7309, 4694, 7272,
        5209, 1072, 1676, 6691,  831, 2641,  567,  973, 3020, 6736, 2110,  315,
        6192, 5318, 5310, 1668, 3641, 2262, 7043, 1322, 2775, 3158, 7383, 1444,
        1170, 4393,  477, 1965,  388, 3648, 2078, 5405, 6197, 6531, 1369, 1991,
        1592, 3825, 2731,   26, 5043, 3853,  288, 2340,  796, 6501, 5440, 4961,
        1070, 5794, 6323, 6486, 5276, 4602, 2341,  130, 3135, 2678, 2102, 5512,
         377, 6579, 3983, 1171, 7344, 6368, 4545, 3783, 5487, 6976, 3954,   55,
        6628, 4387, 1951,  467, 1044,   53, 6837, 5264, 2590, 1637,  685, 4441,
         776, 3850, 6386, 6515, 3435,  807, 1182, 6916, 7223, 6806, 4649, 1790,
        2251, 5135,  775, 4158, 6392, 4639, 4927, 2022]), 'seed_time': tensor([-269222400,  824601600,  249177600, -538790400, -305510400,  176601600,
         741657600,  352857600, -616550400, -108518400, -331430400,  306201600,
         140313600,  518745600,  560217600,  451353600,  684633600,  326937600,
        -580262400, 1016409600, -175910400, -264038400,  383961600,  648345600,
         285465600, -222566400,  762393600,   83289600, -243302400,  762393600,
         394329600, -393638400,  145497600,  430617600, -580262400,  197337600,
        -554342400,  415065600,  928281600,  233625600, -523238400, -289958400,
        -336614400, -165542400, -238118400,  -82598400,  705369600,  824601600,
         228441600, -492134400,   98841600,  586137600,  269913600, -466214400,
         617241600,   83289600,  446169600,  466905600, -336614400,  389145600,
        -523238400,  995673600,  207705600,  456537600, -207014400,  399513600,
        -528422400, -165542400,  949017600,  337305600, 1011225600,  814233600,
         492825600, -336614400,  358041600, -305510400,  337305600,  176601600,
         487641600,  140313600,  238809600,  161049600, -367718400, -492134400,
         544665600,   78105600,  617241600,  715737600,  560217600,  207705600,
        1047513600, -393638400, -398822400,  363225600,  834969600, -222566400,
          10713600,  109209600, -585446400, 1000857600,  736473600,  622425600,
        -103334400,  218073600,  171417600,  321753600, 1073433600, -269222400,
        -196646400,  269913600, -362534400, 1083801600, 1031961600,  938649600,
         135129600,  617241600,  954201600,  798681600,  171417600, -440294400,
         140313600,  161049600, -585446400,  814233600,  -87782400, -492134400,
         513561600, -429926400,  731289600,  301017600,  513561600, -554342400,
         555033600,  518745600,  907545600,  648345600,  695001600,  301017600,
        -414374400, -429926400,  -46310400,  114393600,  238809600,  -46310400,
         192153600, -326246400,  637977600,  736473600, -559526400,  891993600,
          78105600, -523238400,  238809600, -367718400,  399513600, -429926400,
         876441600,  -56678400,  663897600,  326937600,  295833600,  186969600,
         456537600, -435110400,  949017600,  617241600,  -41126400,  145497600,
        -357350400,  259545600,  456537600,  637977600, -507686400,  -20390400,
         264729600,  606873600, -393638400,  238809600,  803865600, 1016409600,
        -144806400,  492825600,  876441600, -300326400,  513561600,  233625600,
         487641600,  -10022400,  752025600,  129945600,  228441600,   83289600,
        -300326400,  249177600, -321062400, 1094169600, 1021593600,  938649600,
         233625600,  715737600,  591321600,  383961600, -336614400,  238809600,
         233625600,  586137600,  891993600,  456537600,  358041600, -175910400,
         933465600,  601689600,  451353600, -616550400,  601689600, -300326400,
         928281600,  192153600,   93657600,  124761600,  938649600, -476582400,
         233625600, -559526400,   47001600,  752025600,  917913600, -357350400,
         772761600, 1078617600,  715737600,  809049600,  777945600, -616550400,
         218073600,   83289600,  311385600,  544665600,  383961600,  492825600,
         295833600,  352857600,  316569600, -331430400,  140313600,  311385600,
           5529600, -486950400,  741657600,  674265600, -461030400,  197337600,
         601689600,  487641600,  731289600,  228441600, 1016409600,  549849600,
         394329600,  140313600,   10713600,  228441600, 1000857600,  306201600,
         394329600,  985305600,   72921600,  752025600,  700185600,  492825600,
         326937600, -554342400,  378777600,  378777600,  306201600, -590630400,
         368409600,  529113600,  363225600,  762393600,  679449600,  306201600,
        -232934400, -269222400,  290649600,  549849600, -481766400,  186969600,
        -590630400, 1052697600, 1042329600, -455846400,  860889600, -331430400,
        1021593600, 1078617600, -585446400,  306201600,  575769600,  285465600,
         705369600,  518745600, -554342400,  637977600,  772761600, -367718400,
        -315878400, -481766400,  295833600,  679449600,  326937600,  223257600,
         715737600,  684633600,  612057600,  301017600,  617241600,  363225600,
        -492134400, -398822400,  114393600,  710553600,   93657600,  451353600,
         461721600, -523238400,  980121600, -398822400,  917913600,  415065600,
           5529600,  228441600, -207014400,  580953600, -461030400, -331430400,
         451353600,  197337600, -321062400,  202521600, -559526400, -222566400,
         233625600, 1021593600, -336614400, -191462400,  212889600,  332121600,
         705369600,  902361600,  772761600, -528422400, -139622400, 1073433600,
          10713600, -523238400,  653529600,  653529600,  767577600,  684633600,
         684633600,   41817600,  269913600, -590630400,  529113600,  243993600,
        -429926400, 1083801600,   21081600,  425433600, -523238400,  866073600,
         907545600,   36633600,  389145600, 1094169600, -170726400, -554342400,
         254361600, -424742400, -575078400,  -98150400, -507686400,  679449600,
         451353600,  269913600,  378777600,  264729600, -295142400,  155865600,
          78105600,  586137600,  783129600,  498009600,  124761600, -476582400,
         135129600,  321753600, -461030400, -528422400,  207705600,  612057600,
        -149990400, -207014400,  321753600,  -67046400, 1052697600,   78105600,
         705369600,  523929600,  104025600,  415065600, -207014400, -139622400,
         700185600,  897177600,  166233600,  290649600,  212889600,  -15206400,
         586137600,  326937600,  425433600,  135129600, -289958400, -367718400,
         809049600, -305510400,  197337600, -336614400, -362534400,  949017600,
         202521600,  363225600, -611366400,  684633600, -305510400, -175910400,
         306201600,   15897600,  575769600,  990489600, -481766400,  622425600,
         378777600,  674265600, -492134400,  959385600, -207014400,  612057600,
          47001600,  980121600, -196646400, -486950400, -165542400,   72921600,
         544665600,  321753600,  124761600, -559526400,  555033600, -429926400,
         969753600,  612057600,  -56678400,  -98150400,  233625600, -461030400,
        -305510400,  772761600,  176601600,  202521600, -243302400,  -77414400,
        -238118400,  803865600, -331430400, -429926400,  238809600,  855705600,
         637977600,  368409600,  752025600, -585446400,  622425600,  860889600,
        -134438400,  523929600,  104025600,  212889600,  316569600,  228441600,
         -51494400,  632793600, -196646400, 1073433600,  420249600, -264038400,
         218073600, -424742400,  202521600,   10713600, -367718400, -398822400,
        -315878400, 1016409600,  -46310400, -476582400, -212198400, -590630400,
         166233600,  492825600]), 'batch_size': 512, 'y': tensor([ 7.6667, 19.0000,  1.0000,  6.0000,  9.0000,  3.3333, 17.0000,  4.7500,
         4.0000, 12.0000, 23.0000, 18.0000, 14.5000, 13.4000,  9.0000, 13.0000,
        12.7500, 19.0000, 17.0000,  3.5000, 11.0000, 14.0000,  8.0000,  7.7500,
        14.3333, 19.0000,  3.0000, 22.0000, 21.0000,  9.5000, 24.0000, 17.0000,
         9.0000,  5.5000, 21.0000, 19.0000,  8.0000, 16.0000,  7.4000, 17.7500,
        19.5000,  3.0000, 13.0000,  5.0000, 23.6667,  9.0000, 12.2500,  8.3333,
        23.6667, 26.0000,  3.0000,  6.5000, 16.0000, 21.0000, 26.0000, 15.3333,
        10.0000, 11.0000, 23.0000, 29.5000, 11.0000,  6.5000, 13.0000, 18.0000,
        20.5000,  6.5000, 17.0000,  5.0000, 15.5000, 27.5000, 12.0000,  8.6667,
        13.4000, 18.0000,  8.0000, 28.0000, 21.3333, 20.3333,  6.0000, 30.0000,
        11.6667,  2.0000, 11.0000, 22.0000,  8.7500, 18.2500,  8.0000, 26.0000,
        18.3333,  9.3333, 13.2500, 10.5000,  5.0000, 15.5000,  1.7500, 17.0000,
        14.0000, 16.0000, 13.5000, 13.5000, 16.0000, 14.3333, 17.0000, 14.5000,
         9.0000, 22.5000, 14.0000, 30.5000, 17.0000, 15.3333, 16.0000, 11.5000,
         7.6667, 21.5000, 25.0000, 17.7500, 10.0000,  7.7500, 18.0000,  8.0000,
        14.5000,  1.0000,  9.0000,  6.6667,  5.0000,  4.5000, 18.7500,  2.0000,
         4.0000, 16.2500,  8.5000, 18.5000, 14.8000,  3.2000,  4.0000,  9.0000,
         3.0000, 13.7500, 13.0000, 30.0000, 12.3333, 13.7500, 19.5000, 10.6667,
        13.0000,  9.0000, 24.5000,  2.0000, 26.0000, 10.6000, 16.7500, 18.5000,
        26.0000, 26.0000, 21.0000, 12.0000, 15.0000, 13.0000, 16.0000, 26.0000,
         4.3333, 16.0000, 20.3333,  1.0000,  7.5000, 16.5000,  4.6667,  9.5000,
        12.5000, 17.0000,  8.8000,  2.5000, 16.0000,  8.0000, 11.2500, 37.0000,
        17.0000,  6.7500, 21.2500, 11.7500,  6.5000, 19.8000,  9.0000,  5.3333,
        22.6667, 32.0000, 15.0000, 10.0000, 15.0000, 27.0000, 13.0000, 17.6667,
        15.6667,  3.0000,  3.0000,  7.0000, 14.0000,  2.0000, 13.0000, 16.0000,
        14.0000, 16.5000, 21.0000, 17.0000, 16.3333, 10.2500,  7.8000, 10.8000,
         5.2500,  6.5000, 12.7500, 27.0000,  3.4000, 11.0000, 15.0000,  9.3333,
        17.8000,  9.5000,  1.0000,  7.0000, 13.5000, 15.5000, 15.7500,  5.0000,
        22.0000, 18.0000, 19.0000, 19.0000, 15.0000, 16.6667, 15.6667, 10.2500,
        28.0000, 13.0000, 10.5000,  9.0000, 12.0000,  8.0000,  9.0000, 19.8000,
        19.0000, 30.0000, 14.5000,  9.6667, 20.3333, 25.0000, 22.0000, 16.0000,
         9.8000, 20.5000,  3.0000, 21.6667,  7.0000, 11.6000,  8.7500, 14.3333,
        16.2500, 12.2500, 30.0000, 10.7500, 16.5000, 14.5000, 15.0000, 15.5000,
        31.0000, 15.2500,  6.0000,  6.0000, 15.0000, 10.5000,  8.5000, 18.0000,
         1.0000, 28.0000, 16.5000, 23.0000, 11.3333,  1.5000, 14.2500, 18.0000,
        29.5000, 11.0000, 31.0000, 20.6667, 15.3333, 13.0000,  7.0000, 18.0000,
        16.0000, 13.4000, 12.0000, 12.0000, 11.6667, 25.0000,  9.5000, 16.3333,
        20.0000,  7.0000, 18.0000, 14.0000,  6.7500, 14.2500, 24.5000, 10.5000,
        22.0000,  9.0000,  8.0000, 16.0000, 14.5000, 13.2500, 15.5000,  3.0000,
        14.3333, 18.0000, 36.6000, 16.2500, 15.2500,  6.2500, 32.0000,  6.0000,
        14.7500,  4.0000,  4.0000, 17.2000, 12.5000,  7.2500, 11.5000,  7.0000,
        12.0000, 22.0000, 14.5000,  9.0000,  8.0000, 13.0000, 24.0000,  6.7500,
         7.2000,  9.0000,  5.0000,  7.2500, 17.0000, 16.0000, 27.6667, 10.0000,
        14.0000, 10.0000, 10.0000,  3.0000, 13.0000,  3.5000, 27.2500,  9.0000,
        21.0000,  2.0000,  8.3333, 14.0000, 32.0000, 14.0000, 27.0000, 15.0000,
        13.7500, 13.5000, 15.0000,  8.0000, 23.5000,  5.0000,  9.3333, 10.8333,
        27.0000,  2.6667, 22.0000, 10.3333,  1.0000, 24.0000, 13.2500,  8.3333,
        15.0000,  7.0000, 15.5000, 11.0000, 20.0000, 10.0000,  4.0000, 16.7500,
        16.0000, 27.6667,  7.0000, 21.5000, 15.0000, 16.0000, 11.5000, 17.2500,
        17.5000, 10.5000, 12.0000, 15.0000, 10.5000,  6.5000, 11.7500, 30.0000,
        14.0000, 34.2000, 13.0000, 12.3333, 25.5000, 23.0000,  5.0000,  5.0000,
        18.2500, 21.7500,  9.0000, 21.3333, 10.7500,  5.5000, 18.0000,  1.7500,
        13.7500, 16.3333,  8.6667,  9.0000, 11.2500, 13.0000, 24.3333, 21.0000,
         2.0000,  7.0000,  9.0000, 19.0000, 28.0000, 22.0000,  8.6667, 10.5000,
        14.0000, 19.5000, 23.0000, 32.0000, 29.0000,  5.5000, 29.5000, 17.6667,
        18.2500, 11.7500,  8.0000, 10.0000, 23.0000, 11.0000,  8.0000,  3.2500,
         9.0000, 11.4000,  4.0000, 15.5000, 25.0000,  7.3333, 11.5000, 19.0000,
        11.6667, 20.0000,  5.5000, 11.0000,  8.4000,  4.0000, 19.5000, 37.2000,
        11.0000,  1.0000, 20.6667, 19.0000, 13.3333, 14.5000, 22.0000, 11.0000,
        21.0000,  2.5000, 24.0000, 16.2500, 14.2500, 31.0000, 34.0000, 16.3333,
        18.5000, 17.0000, 16.0000,  8.5000, 14.7500,  9.6667,  9.0000, 21.0000,
        14.7500, 16.0000, 17.5000, 13.3333,  7.0000, 33.0000, 24.0000,  3.0000,
        13.8000, 13.0000, 22.0000,  7.0000, 13.2500,  4.0000, 19.3333, 14.0000,
        15.0000,  5.0000, 21.0000,  9.0000, 23.5000, 25.0000, 18.0000, 22.0000],
       dtype=torch.float64)}, 'races': {'tf': TensorFrame(
  num_cols=5,
  num_rows=22090,
  categorical (1): ['year'],
  numerical (1): ['round'],
  timestamp (2): ['date', 'time'],
  embedding (1): ['name'],
  has_target=False,
  device='cpu',
), 'time': tensor([-420681600, -409190400, -398304000,  ...,  808272000,  826416000,
         828230400]), 'n_id': tensor([ 55,  56,  57,  ..., 573, 581, 582]), 'batch': tensor([  0,   0,   0,  ..., 353, 353, 353]), 'num_sampled_nodes': [0, 0, 22090]}, 'standings': {'tf': TensorFrame(
  num_cols=4,
  num_rows=21547,
  numerical (3): ['points', 'position', 'wins'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([-420681600, -409190400, -398304000,  ...,  432086400,  433296000,
         435024000]), 'n_id': tensor([ 3756,  3794,  3826,  ..., 16676, 16720, 16747]), 'batch': tensor([  0,   0,   0,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 21547, 0]}, 'results': {'tf': TensorFrame(
  num_cols=11,
  num_rows=19313,
  numerical (10): ['fastestLap', 'grid', 'laps', 'milliseconds', 'number', 'points', 'position', 'positionOrder', 'rank', 'statusId'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([-420681600, -409190400, -398304000,  ...,  370396800,  372124800,
         417571200]), 'n_id': tensor([1383, 1403, 1419,  ..., 8699, 8743, 9266]), 'batch': tensor([  0,   0,   0,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 19313, 0]}, 'constructors': {'tf': TensorFrame(
  num_cols=3,
  num_rows=1316,
  embedding (3): ['constructorRef', 'name', 'nationality'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([  5,  93, 163,  ...,  56,   2,  20]), 'batch': tensor([  0,   0,   0,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 0, 1316]}, 'qualifying': {'tf': TensorFrame(
  num_cols=3,
  num_rows=1802,
  numerical (2): ['number', 'position'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([1001721600, 1016236800,  764640000,  ...,  970876800, 1001721600,
        1016236800]), 'n_id': tensor([1501, 1507,   22,  ..., 1464, 1502, 1527]), 'batch': tensor([ 19,  19,  38,  ..., 505, 505, 505]), 'num_sampled_nodes': [0, 1802, 0]}, 'constructor_standings': {'tf': TensorFrame(
  num_cols=4,
  num_rows=0,
  numerical (3): ['points', 'position', 'wins'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([], dtype=torch.int64), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}, 'circuits': {'tf': TensorFrame(
  num_cols=7,
  num_rows=0,
  numerical (3): ['alt', 'lat', 'lng'],
  embedding (4): ['circuitRef', 'country', 'location', 'name'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}}, '_edge_store_dict': {('constructor_results', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'constructor_results'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructor_results', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'constructor_results'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'f2p_circuitId', 'circuits'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('circuits', 'rev_f2p_circuitId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('standings', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'standings'): {'edge_index': tensor([[    0,     1,     2,  ..., 21544, 21545, 21546],
        [    0,     1,     2,  ..., 21544, 21545, 21546]]), 'e_id': tensor([ 3756,  3794,  3826,  ..., 16676, 16720, 16747]), 'num_sampled_edges': [0, 21547]}, ('standings', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[    0,     1,     2,  ..., 21544, 21545, 21546],
        [    0,     0,     0,  ...,   511,   511,   511]]), 'e_id': tensor([ 3756,  3794,  3826,  ..., 16676, 16720, 16747]), 'num_sampled_edges': [21547, 0]}, ('drivers', 'rev_f2p_driverId', 'standings'): {'edge_index': tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 21544, 21545, 21546]]), 'e_id': tensor([22511, 22512, 22513,  ..., 12444, 12445, 12446]), 'num_sampled_edges': [0, 21547]}, ('results', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'results'): {'edge_index': tensor([[    0,     1,     2,  ..., 21531, 21532, 21533],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), 'e_id': tensor([1383, 1403, 1419,  ..., 8699, 8743, 9266]), 'num_sampled_edges': [0, 19313]}, ('results', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[    0,     1,     2,  ..., 19310, 19311, 19312],
        [    0,     0,     0,  ...,   511,   511,   511]]), 'e_id': tensor([1383, 1403, 1419,  ..., 8699, 8743, 9266]), 'num_sampled_edges': [19313, 0]}, ('drivers', 'rev_f2p_driverId', 'results'): {'edge_index': tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), 'e_id': tensor([18458, 18459, 18460,  ..., 11726, 11727, 11728]), 'num_sampled_edges': [0, 19313]}, ('results', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'results'): {'edge_index': tensor([[    0,     0,     0,  ...,  1314,  1314,  1315],
        [    0,     1,     2,  ..., 19310, 19311, 19312]]), 'e_id': tensor([3433, 3439, 3447,  ..., 1592, 1594, 8155]), 'num_sampled_edges': [0, 19313]}, ('qualifying', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'qualifying'): {'edge_index': tensor([[  947,   950,  1687,  ..., 21372, 21388, 21390],
        [    0,     1,     2,  ...,  1799,  1800,  1801]]), 'e_id': tensor([1501, 1507,   22,  ..., 1464, 1502, 1527]), 'num_sampled_edges': [0, 1800]}, ('qualifying', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[   0,    1,    2,  ..., 1799, 1800, 1801],
        [  19,   19,   38,  ...,  505,  505,  505]]), 'e_id': tensor([1501, 1507,   22,  ..., 1464, 1502, 1527]), 'num_sampled_edges': [1802, 0]}, ('drivers', 'rev_f2p_driverId', 'qualifying'): {'edge_index': tensor([[  19,   19,   38,  ...,  505,  505,  505],
        [   0,    1,    2,  ..., 1799, 1800, 1801]]), 'e_id': tensor([2349, 2350, 3164,  ..., 1963, 1964, 1965]), 'num_sampled_edges': [0, 1802]}, ('qualifying', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'qualifying'): {'edge_index': tensor([[  60,   60,  112,  ..., 1302, 1302, 1302],
        [   0,    1,    2,  ..., 1799, 1800, 1801]]), 'e_id': tensor([644, 646,   1,  ..., 643, 645, 647]), 'num_sampled_edges': [0, 1802]}, ('constructor_standings', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'constructor_standings'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructor_standings', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}}}
batch: HeteroData(
  constructor_results={
    tf=TensorFrame([0, 2]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  drivers={
    tf=TensorFrame([512, 6]),
    n_id=[512],
    batch=[512],
    num_sampled_nodes=[3],
    input_id=[512],
    seed_time=[512],
    batch_size=512,
    y=[512],
  },
  races={
    tf=TensorFrame([22090, 5]),
    time=[22090],
    n_id=[22090],
    batch=[22090],
    num_sampled_nodes=[3],
  },
  standings={
    tf=TensorFrame([21547, 4]),
    time=[21547],
    n_id=[21547],
    batch=[21547],
    num_sampled_nodes=[3],
  },
  results={
    tf=TensorFrame([19313, 11]),
    time=[19313],
    n_id=[19313],
    batch=[19313],
    num_sampled_nodes=[3],
  },
  constructors={
    tf=TensorFrame([1316, 3]),
    n_id=[1316],
    batch=[1316],
    num_sampled_nodes=[3],
  },
  qualifying={
    tf=TensorFrame([1802, 3]),
    time=[1802],
    n_id=[1802],
    batch=[1802],
    num_sampled_nodes=[3],
  },
  constructor_standings={
    tf=TensorFrame([0, 4]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  circuits={
    tf=TensorFrame([0, 7]),
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  (constructor_results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, f2p_circuitId, circuits)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (circuits, rev_f2p_circuitId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, standings)={
    edge_index=[2, 21547],
    e_id=[21547],
    num_sampled_edges=[2],
  },
  (standings, f2p_driverId, drivers)={
    edge_index=[2, 21547],
    e_id=[21547],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, standings)={
    edge_index=[2, 21547],
    e_id=[21547],
    num_sampled_edges=[2],
  },
  (results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, results)={
    edge_index=[2, 19313],
    e_id=[19313],
    num_sampled_edges=[2],
  },
  (results, f2p_driverId, drivers)={
    edge_index=[2, 19313],
    e_id=[19313],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, results)={
    edge_index=[2, 19313],
    e_id=[19313],
    num_sampled_edges=[2],
  },
  (results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, results)={
    edge_index=[2, 19313],
    e_id=[19313],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, qualifying)={
    edge_index=[2, 1800],
    e_id=[1800],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_driverId, drivers)={
    edge_index=[2, 1802],
    e_id=[1802],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, qualifying)={
    edge_index=[2, 1802],
    e_id=[1802],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, qualifying)={
    edge_index=[2, 1802],
    e_id=[1802],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  }
)
batch_scuffed: HeteroData(
  _global_store={},
  _node_store_dict={
    constructor_results={
      tf=TensorFrame([0, 2]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    drivers={
      tf=TensorFrame([512, 6]),
      n_id=[512],
      batch=[512],
      num_sampled_nodes=[3],
      input_id=[512],
      seed_time=[512],
      batch_size=512,
      y=[512],
    },
    races={
      tf=TensorFrame([22090, 5]),
      time=[22090],
      n_id=[22090],
      batch=[22090],
      num_sampled_nodes=[3],
    },
    standings={
      tf=TensorFrame([21547, 4]),
      time=[21547],
      n_id=[21547],
      batch=[21547],
      num_sampled_nodes=[3],
    },
    results={
      tf=TensorFrame([19313, 11]),
      time=[19313],
      n_id=[19313],
      batch=[19313],
      num_sampled_nodes=[3],
    },
    constructors={
      tf=TensorFrame([1316, 3]),
      n_id=[1316],
      batch=[1316],
      num_sampled_nodes=[3],
    },
    qualifying={
      tf=TensorFrame([1802, 3]),
      time=[1802],
      n_id=[1802],
      batch=[1802],
      num_sampled_nodes=[3],
    },
    constructor_standings={
      tf=TensorFrame([0, 4]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    circuits={
      tf=TensorFrame([0, 7]),
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
  },
  _edge_store_dict={
    (constructor_results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, f2p_circuitId, circuits)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (circuits, rev_f2p_circuitId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, standings)={
      edge_index=[2, 21547],
      e_id=[21547],
      num_sampled_edges=[2],
    },
    (standings, f2p_driverId, drivers)={
      edge_index=[2, 21547],
      e_id=[21547],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, standings)={
      edge_index=[2, 21547],
      e_id=[21547],
      num_sampled_edges=[2],
    },
    (results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, results)={
      edge_index=[2, 19313],
      e_id=[19313],
      num_sampled_edges=[2],
    },
    (results, f2p_driverId, drivers)={
      edge_index=[2, 19313],
      e_id=[19313],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, results)={
      edge_index=[2, 19313],
      e_id=[19313],
      num_sampled_edges=[2],
    },
    (results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, results)={
      edge_index=[2, 19313],
      e_id=[19313],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, qualifying)={
      edge_index=[2, 1800],
      e_id=[1800],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_driverId, drivers)={
      edge_index=[2, 1802],
      e_id=[1802],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, qualifying)={
      edge_index=[2, 1802],
      e_id=[1802],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, qualifying)={
      edge_index=[2, 1802],
      e_id=[1802],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
  }
)
