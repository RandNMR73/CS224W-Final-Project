Loading Database object from data/relbench/rel-f1/db...
Done in 0.10 seconds.
type(batch): <class 'torch_geometric.data.hetero_data.HeteroData'>
batch edge_index_dict: {('constructor_results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'f2p_circuitId', 'circuits'): tensor([], size=(2, 0), dtype=torch.int64), ('circuits', 'rev_f2p_circuitId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'standings'): tensor([[    0,     1,     2,  ..., 21517, 21518, 21519],
        [    0,     1,     2,  ..., 21517, 21518, 21519]]), ('standings', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 21517, 21518, 21519],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'standings'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 21517, 21518, 21519]]), ('results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'results'): tensor([[    0,     1,     2,  ..., 21516, 21517, 21518],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), ('results', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 19141, 19142, 19143],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'results'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), ('results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'results'): tensor([[    0,     0,     0,  ...,  1310,  1310,  1310],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), ('qualifying', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'qualifying'): tensor([[  205,   206,   207,  ..., 21008, 21009, 21011],
        [    0,     1,     2,  ...,  2447,  2448,  2449]]), ('qualifying', 'f2p_driverId', 'drivers'): tensor([[   0,    1,    2,  ..., 2447, 2448, 2449],
        [   4,    4,    4,  ...,  498,  498,  498]]), ('drivers', 'rev_f2p_driverId', 'qualifying'): tensor([[   4,    4,    4,  ...,  498,  498,  498],
        [   0,    1,    2,  ..., 2447, 2448, 2449]]), ('qualifying', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'qualifying'): tensor([[  10,   10,   10,  ..., 1274, 1274, 1274],
        [   0,    1,    2,  ..., 2447, 2448, 2449]]), ('constructor_standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_standings', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64)}
attributes: {'_edge_attr_cls': <class 'torch_geometric.data.graph_store.EdgeAttr'>, '_tensor_attr_cls': <class 'torch_geometric.data.feature_store.TensorAttr'>, '_global_store': {}, '_node_store_dict': {'constructor_results': {'tf': TensorFrame(
  num_cols=2,
  num_rows=0,
  numerical (1): ['points'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([], dtype=torch.int64), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}, 'drivers': {'tf': TensorFrame(
  num_cols=6,
  num_rows=512,
  timestamp (1): ['dob'],
  embedding (5): ['code', 'driverRef', 'forename', 'nationality', 'surname'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([  7, 171, 303, 454,  48,  55, 355, 363, 171, 741, 234, 476,  63,  62,
        288,  93,  98, 475,  13, 737, 388,  29, 146, 108, 359,  56, 186,  94,
        355,  76, 555, 250,  54, 345, 345, 237, 654, 206,  20,  89, 118, 741,
         78,  30, 596, 113, 321, 523, 101, 111, 202, 116,  93, 172, 456, 181,
        561, 215, 327,  21,  47, 486, 538, 136,  85, 279, 633,  62, 109, 623,
        162, 181,  13, 177, 304, 122, 520, 345, 642, 171, 116, 402, 117,  76,
         36, 552, 384, 375, 435,  76, 660, 162, 732, 342, 223, 132,  94, 157,
        103, 172,  54, 177, 139, 802,  22, 387, 435,  78, 181, 121,  78, 147,
        104, 448, 579, 111, 162, 455, 395, 369, 289, 608,  55, 218, 279, 231,
        170, 149, 483,  22, 393, 521, 357, 221, 120, 455, 186, 198, 144, 162,
        355,  48,  97, 586, 426, 528, 155, 155, 400, 403, 174, 520, 402, 291,
        375, 627, 183, 329,  98, 404, 162,  55, 144, 205,  13, 117, 245, 455,
         21,  64, 107, 108, 514, 396, 180, 242, 183, 340,  29, 393, 221,  94,
        554, 448, 343, 206,  43, 115, 643, 615, 232, 633,  80,  29, 715, 234,
        128, 289, 402, 174, 162, 760, 339, 196, 116, 618, 388, 498, 660,  80,
        116, 237, 171, 288, 477, 288, 274, 116, 178, 108, 611, 359, 579, 407,
         14, 222,  94, 169, 355, 138, 294,  91, 144,  29, 234, 308, 611, 116,
         49, 355, 220,  87, 375, 141, 255,  43, 697,  99, 726, 218, 121, 295,
        157, 220,  22, 340, 541, 295, 122, 228, 174, 498, 176, 101,  78,  45,
        355,  51, 151,  83, 199, 166,  94, 221,  93, 352, 581, 172,  76, 297,
        730,  21, 298, 186,  14, 202,  20, 104, 231, 178,  21, 650,  62, 448,
        355, 122, 215, 198, 116,  30, 279, 220, 340,  63, 196,  83, 400, 116,
        590, 592, 206, 475, 279, 249, 409,  70, 579, 577, 589, 101,  86,  94,
         82, 355, 181, 508,  94, 266, 476, 689,  55, 237, 140, 157, 404,  54,
        593,  40, 351, 206, 104, 162,  94, 570, 316, 355, 363, 216, 374, 650,
        717,  56,  42,  74, 386, 277,  54, 319, 104, 689,  83, 503, 704,  30,
         63, 181, 381, 242, 196, 538, 356, 196, 230, 126, 109,  47, 100, 565,
         76,  83, 136, 202, 297, 102, 521, 577, 292, 484, 707, 305, 261, 763,
         71, 198, 319,  29,  93,  20, 529, 177,  86, 501, 227,  54, 409,  85,
         43, 453, 187,  20, 173, 220, 359,  46, 610, 171, 327, 756, 326,  21,
         13, 360,  80, 787, 136, 201,  76, 486, 122, 172, 155,  63, 288, 232,
        374,  70, 178, 230, 181,  48, 589, 236, 423, 140,  64,  64, 655,  56,
        145, 384, 455, 375, 111,  70, 116, 382, 292, 232,  76,  88, 198, 177,
        133,  21, 611,  86, 322, 136, 288, 501, 761, 396, 108, 222, 174, 116,
        117, 607,  54, 381,  70, 577, 186,  20, 763, 456, 582,  29,  54, 136,
         78,  99, 429, 174, 326,  21, 611, 328,  20, 222, 199,  94, 157, 306,
        527, 340, 118, 237, 647, 242, 483, 363]), 'batch': tensor([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,
         14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,
         28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,
         42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,
         56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,
         70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,
         84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
         98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125,
        126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153,
        154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
        168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
        196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
        210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
        238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
        252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
        266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
        280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293,
        294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307,
        308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321,
        322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335,
        336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
        350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,
        364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377,
        378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391,
        392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405,
        406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
        420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433,
        434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447,
        448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461,
        462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475,
        476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
        490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503,
        504, 505, 506, 507, 508, 509, 510, 511]), 'num_sampled_nodes': [512, 0, 0], 'input_id': tensor([4225, 4395, 5870, 2243, 6104, 4686, 1310, 6846, 5370, 6047, 1236, 6911,
        7048, 6571, 2196, 3412, 7084, 2274, 1890,  900,  326, 3757, 5701, 4793,
        5421, 5205, 4463, 6224, 6813, 2019, 5076, 7218,  992,  829,  379, 2565,
        2733, 7249, 2798, 6618, 2405, 2771, 4268,  963, 1860, 6189,  328, 5987,
        5731, 4811, 3913, 3909, 3371, 5310, 6394, 6779, 6001, 7170,  296, 5129,
        4690, 7353, 1807, 5745, 7045, 6804,  910,  936, 3393, 6451, 6739, 4882,
        4688, 5798, 3538, 1064, 4572, 4562, 4183, 1587, 2942, 5441, 1515, 3839,
        6536, 7380, 6392, 5909, 4077, 5280, 5540, 3932, 5552, 1214, 2593, 5724,
         645, 2948, 1496, 1647, 3267, 2518, 3878, 6497, 5590, 3137, 5946, 2865,
        6754, 4831, 2868, 3362, 2069, 1325, 6496, 3432, 1060, 2697, 6835, 1715,
        5861, 6453, 3762, 6262, 4036,  214, 4815, 6629, 3146, 5149,  783,  919,
        2200, 2558,   93,  368, 2113, 1660,  584,  152, 5035, 4733, 3786, 4154,
        1382, 4128, 3418, 3881, 4075, 7373, 1595, 4152, 2237, 1678, 6410, 5110,
        2492, 2157, 7087, 1278, 6661, 6557, 4335, 4420, 4714, 3396, 5344, 4545,
        5613, 1007, 1029, 5707, 4582, 1727, 5773, 3520, 4861, 2618, 3848,  357,
        6746, 2851, 1383, 1805, 6330, 6760, 4213, 6587, 2717, 6943, 3534, 4184,
         574, 5196, 5541,  317, 3382, 2571, 5022, 2037, 2500, 3699, 5890, 2153,
        5261, 6443,  337, 5550, 5557, 1471, 5230,  721, 2531, 4068, 3657, 6781,
         239, 2464, 2015, 6134, 1874, 5943,  424, 2223, 5573, 7230, 5307, 1553,
        7442, 5226, 6309, 6611, 1529, 4288, 4985, 1703, 2319, 5722, 3297, 3138,
        3489, 6155, 3088, 3828, 6774,  972, 2310, 1050, 7434, 1667, 2867, 7260,
        7182, 7198, 7002, 2184, 2239, 2158, 5768, 2317, 3402, 7419, 2974, 4299,
          59, 4215, 7441, 1432, 4410,   79,  203, 7130, 5726, 1140, 3455, 5468,
        2711, 4874, 4805, 2579, 4209, 2333, 6353, 2554, 4699, 6727, 3771, 5309,
        1638,  175, 5637, 6457, 3736, 5524, 2677,  576, 3911, 6786, 6184, 1452,
        1687, 2582, 5957, 5179, 5382, 1550, 6855, 2881,  845, 5992, 3902,  849,
        1669,  718, 4533, 4272, 1804, 5993, 1858, 3870, 1472, 5192, 6102, 5965,
        7223, 4114, 6603, 2606, 5033, 2746, 4269, 1250, 7096,  154, 5010, 1449,
        2700, 4212, 5419, 4389, 4355, 1609, 5765, 7378, 2150, 1411, 4062, 5320,
        2646,  885, 7429, 1974, 4219, 1011, 3596, 2635,   89, 5396,  629, 2735,
        6114, 2690, 4174,  962, 2821, 4957,  324, 4498, 3901, 1793, 3067, 3474,
        7209, 4803, 4375, 2786,  543, 4198, 3292, 4344, 6214, 7216, 1673, 3790,
        2770, 1800, 6374, 1305, 3693, 3062, 2181,  477, 3317, 2062, 7283, 5197,
        1991,  953, 2758, 7222, 4749, 5097, 5316, 5632, 5459,  984, 4274,  810,
        6687, 6997, 3414, 4465, 3611, 2787, 5066,  687, 2594, 3240, 5879, 3791,
        7007, 6825, 4281, 3224, 7229, 6709, 6667, 4577, 3407,  683, 1081, 5177,
        7308, 5825, 5927, 1464, 4826, 3505, 4886, 3751, 5106, 6282, 4565, 3385,
        2414, 2381,  449,   45, 3386, 3121, 1337, 5000, 2008,  539, 2910, 6836,
        2151, 1654, 3361, 5178,  222, 2521, 7110, 2330, 5124, 7061, 3987, 4915,
        6342, 6914, 4181,  792, 1521, 4969, 6207, 6150,  193, 6444, 6138,  332,
        4712, 6013,  241, 1925, 3719, 6913, 2263,  550,   20, 5746, 4735, 6588,
        4080, 2914, 5883, 3774, 6508, 1224, 7022, 7299, 4907, 7188, 3404, 5402,
        3233, 5017, 5201, 7297, 6949,  218, 3661, 5457]), 'seed_time': tensor([1000857600,  358041600,   78105600, -232934400,  834969600,  959385600,
         -46310400, -181094400,  176601600, -611366400,   10713600, -414374400,
         798681600,  814233600,  -77414400,  586137600,  700185600, -455846400,
         969753600, -554342400,  -72230400, 1042329600,  632793600,  648345600,
         -46310400,  710553600,  161049600,  477273600,   21081600,  508377600,
        -461030400,  218073600,  824601600, -134438400,  -20390400,  269913600,
        -492134400,  161049600, 1011225600,  653529600,  715737600, -575078400,
         824601600,  990489600, -367718400,  591321600,  -82598400, -367718400,
         560217600,  586137600,  358041600,  363225600,  637977600,  425433600,
        -232934400,  171417600, -429926400,  368409600,   10713600, 1073433600,
         933465600, -300326400, -461030400,  617241600,  809049600,   10713600,
        -585446400, 1021593600,  555033600, -440294400,  285465600,  301017600,
         949017600,  316569600,  114393600,  591321600, -305510400,  -82598400,
        -549158400,  394329600,  420249600, -165542400,  643161600,  643161600,
         954201600, -336614400, -212198400,  -51494400, -207014400,  482457600,
        -549158400,  295833600, -590630400,   83289600,   83289600,  580953600,
         425433600,  389145600,  715737600,  311385600,  964569600,  332121600,
         580953600, -611366400, 1026777600,  -77414400, -212198400,  720921600,
         238809600,  492825600,  705369600,  648345600,  456537600, -321062400,
        -590630400,  451353600,  606873600, -367718400, -113702400,  -51494400,
         109209600, -455846400,  902361600,  311385600,  -41126400,  295833600,
         555033600,  637977600, -305510400,  959385600, -108518400, -528422400,
        -108518400,  202521600,  731289600, -269222400,  207705600,  166233600,
         648345600,  529113600,  -15206400,  803865600,  783129600, -440294400,
        -549158400, -336614400,  492825600,  487641600, -207014400, -326246400,
         368409600, -429926400, -300326400,   98841600, -300326400, -616550400,
         415065600,   83289600,  684633600, -149990400,  518745600,  886809600,
         591321600,  295833600,  871257600,  549849600,  243993600, -238118400,
         949017600,  767577600,  700185600,  736473600, -336614400, -103334400,
         394329600,  166233600,  389145600,  -15206400,  705369600, -201830400,
         264729600,  777945600, -549158400, -461030400,   83289600,  233625600,
        1088985600,  783129600, -455846400, -492134400,  129945600, -549158400,
         669081600,  855705600, -554342400,  -41126400,  601689600,  176601600,
        -232934400,  477273600,  383961600, -549158400,    5529600,   98841600,
         529113600, -398822400, -118886400, -585446400, -616550400,  814233600,
         622425600,  264729600,  295833600, -191462400, -326246400,  155865600,
         202521600,  518745600,  518745600,  783129600, -590630400, -207014400,
        -440294400, -232934400,  897177600,  311385600,  337305600,  508377600,
        -357350400,  637977600,  176601600,  669081600,  612057600,  891993600,
         -30758400,   62553600, -429926400,  586137600,  840153600,  -77414400,
         243993600,  643161600,  -46310400,  663897600,  207705600,  897177600,
        -538790400,  669081600, -590630400,  140313600,  705369600,  135129600,
         337305600,  295833600, 1011225600,  -20390400, -300326400,   78105600,
         425433600,  212889600,  513561600, -538790400,  301017600,  705369600,
         829785600, 1073433600, -326246400, 1047513600,  326937600,  767577600,
         332121600,  560217600,  575769600,  295833600,  477273600, -289958400,
        -424742400,  461721600,  601689600,  140313600, -559526400, 1026777600,
         171417600,  228441600, 1052697600,  321753600,  871257600,  425433600,
         207705600,  461721600,  871257600, -461030400, 1011225600, -492134400,
         -72230400,  663897600,  363225600,  129945600,  606873600, 1021593600,
          62553600,  135129600, -269222400,  809049600,  124761600,  513561600,
        -232934400,  648345600, -357350400, -398822400,  383961600, -362534400,
         135129600,  197337600, -191462400,  798681600, -461030400, -414374400,
        -616550400,  498009600,  814233600,  772761600,  840153600, -222566400,
         202521600, -300326400,  700185600,  166233600, -295142400, -549158400,
         809049600,   41817600,  663897600,  518745600, -175910400,  923097600,
        -367718400, 1088985600,  -10022400,  368409600,  555033600,  311385600,
         430617600, -331430400,  109209600, -367718400, -165542400,  321753600,
        -170726400, -492134400, -559526400,  669081600, 1047513600,  860889600,
        -113702400, -108518400,  741657600,   78105600,  591321600, -518054400,
         798681600, -315878400, -523238400, 1063065600,  917913600,   83289600,
         -72230400,   47001600,  383961600, -398822400,   21081600,  285465600,
         254361600,  606873600,  415065600, 1063065600,  783129600, -336614400,
         876441600,  518745600,  601689600,  233625600,  109209600,  772761600,
        -559526400, -440294400,  -98150400, -295142400, -523238400,   47001600,
         -10022400, -611366400,  923097600,  358041600,   36633600,  814233600,
         622425600,  959385600, -590630400,  207705600,  746841600, -559526400,
         332121600,  891993600, -222566400,  840153600,  793497600, -269222400,
         430617600, 1031961600,  523929600,  155865600, -191462400, 1057881600,
        -393638400,  306201600,   83289600, -554342400,   47001600,  767577600,
         990489600,  -51494400,  772761600, -611366400,  321753600,  358041600,
         492825600, -326246400,  492825600,  337305600,  591321600,  829785600,
         -67046400,  212889600, -134438400,  860889600,  513561600,  197337600,
         285465600,  938649600, -590630400,  238809600, -139622400,  580953600,
         684633600,  793497600, -528422400,  891993600,  575769600, -238118400,
        -362534400, -144806400,  555033600,  803865600,  555033600, -118886400,
          98841600,  171417600,  648345600,  809049600,  264729600,  326937600,
         622425600, 1047513600, -528422400,  767577600,  145497600,  311385600,
          36633600, -424742400, -549158400, -175910400,  684633600,  161049600,
         518745600,  663897600,  383961600, -414374400,  720921600, -103334400,
         886809600, -466214400,  202521600,  855705600, -590630400, -424742400,
        -367718400,  834969600,  985305600,  591321600,  793497600,  772761600,
        -222566400,  523929600,   36633600,  840153600, -398822400,   47001600,
         907545600,   41817600,  207705600,  332121600,  498009600,   36633600,
        -367718400, -212198400,  720921600,   83289600, -523238400,  269913600,
        -336614400, -212198400]), 'batch_size': 512, 'y': tensor([21.5000,  6.2500,  8.2500, 14.0000, 10.5000, 10.0000, 11.0000, 13.0000,
        20.3333,  5.0000,  9.0000,  6.0000, 17.2500,  7.6667,  9.3333, 23.2500,
        13.3333, 14.0000,  2.5000, 14.0000, 11.5000,  4.0000, 15.0000, 20.5000,
        10.6667,  9.2500, 25.0000, 23.0000, 12.2500,  6.0000,  2.0000, 14.5000,
         7.6667,  7.5000,  4.6667,  9.0000, 12.0000, 17.0000, 15.0000, 17.7500,
         8.3333,  8.0000, 13.0000, 12.4000, 28.0000, 11.0000,  8.0000, 19.0000,
         7.3333, 15.2500,  6.5000,  9.5000, 18.0000, 24.3333, 18.0000,  3.5000,
        29.0000, 28.0000,  8.3333,  2.0000, 15.2500, 23.0000,  7.0000, 14.5000,
        18.5000,  5.6667,  3.2500, 17.0000, 20.4000,  6.0000, 17.3333, 12.7500,
        15.0000, 11.0000, 11.7500,  5.6667, 14.0000, 10.0000,  3.0000, 15.3333,
         3.8000, 13.5000, 10.6000,  5.8000, 16.0000, 23.0000, 23.5000,  9.3333,
        13.0000, 21.3333, 35.0000,  7.6667, 32.0000, 22.0000, 14.0000, 15.4000,
        11.3333,  8.0000, 15.0000, 19.0000, 17.0000,  4.2500, 26.8000,  2.0000,
         4.0000, 13.6667, 20.0000, 18.0000,  1.5000, 17.0000, 18.7500, 24.0000,
         9.0000, 10.0000,  1.0000, 20.4000, 20.0000, 17.0000, 11.0000,  7.5000,
        12.7500,  3.0000,  9.2500, 21.0000, 10.0000, 26.5000, 19.5000, 35.0000,
        22.0000, 11.7500, 10.0000, 20.3333,  3.5000,  2.7500, 21.2500, 22.3333,
        10.3333,  4.2500,  8.0000, 11.0000, 14.0000,  8.0000, 15.0000,  9.0000,
        13.5000, 22.0000, 21.0000, 23.0000, 13.0000, 19.0000, 19.0000, 11.0000,
        10.0000, 13.0000, 16.0000,  9.0000, 20.0000, 24.0000, 20.5000, 13.0000,
         6.2000,  6.0000,  7.3333, 24.0000,  9.0000, 13.0000, 17.0000, 24.0000,
         8.5000, 11.0000, 22.6667, 15.0000, 12.0000,  6.5000, 18.5000, 10.0000,
        17.2500, 14.0000, 12.2500, 18.0000, 12.2500, 20.0000, 17.0000, 28.0000,
        12.0000, 11.5000, 13.2500, 15.0000,  7.0000,  6.0000,  5.0000,  3.0000,
        14.3333,  9.3333, 18.0000, 20.5000,  9.0000, 20.0000, 11.0000,  5.0000,
        16.3333, 34.0000,  8.0000, 14.0000,  1.5000, 11.0000,  6.0000,  2.0000,
        11.0000, 15.0000, 10.5000,  8.2500, 11.0000,  3.0000,  5.0000, 11.0000,
        28.5000,  3.2000, 17.2000, 17.5000, 12.0000, 17.5000,  7.0000,  7.0000,
        14.2500, 10.0000, 25.0000, 10.0000, 16.0000, 23.0000, 19.6667, 12.3333,
        15.0000,  3.4000, 17.0000, 15.0000,  2.0000,  4.7500, 13.2500,  1.6667,
         6.3333, 13.8000, 18.0000, 32.0000, 22.0000, 14.7500, 12.0000, 11.6667,
        30.0000, 26.0000, 18.7500, 17.0000, 16.6667,  5.0000,  8.5000, 11.5000,
         6.0000, 21.0000, 12.3333, 15.3333, 18.0000,  3.0000, 15.5000, 11.2500,
        15.8000, 17.0000,  3.0000, 13.2500, 18.5000, 11.7500, 19.0000, 18.6667,
        19.5000,  4.3333, 17.0000, 11.0000,  7.5000, 13.6667, 25.0000, 27.0000,
        15.0000,  6.5000, 26.5000, 15.3333, 13.0000, 10.5000,  7.7500, 19.3333,
        25.3333, 12.5000, 15.2500, 10.0000,  9.0000, 22.0000,  3.5000, 18.0000,
        15.5000,  1.0000,  2.0000, 14.0000,  8.0000, 10.5000, 18.0000, 12.7500,
        22.5000, 11.7500, 15.0000,  7.2500, 14.5000, 18.0000, 20.0000, 12.0000,
        19.5000,  9.6667, 22.0000,  5.2500,  1.3333, 13.0000, 15.0000, 10.5000,
         6.6667, 14.0000, 12.7500,  4.0000, 13.2500, 25.0000,  1.0000, 20.0000,
         5.0000, 15.0000, 12.0000,  3.0000, 30.0000, 18.0000, 13.0000, 13.0000,
        12.0000, 14.0000, 12.0000, 11.3333, 18.2000, 22.0000, 11.2500, 26.0000,
        21.0000,  7.5000,  5.0000, 23.0000,  9.0000, 20.0000, 18.0000,  9.0000,
         9.7500, 16.6667,  9.0000, 22.0000, 15.8000, 19.0000, 19.3333, 12.0000,
        12.0000, 20.0000, 14.0000,  9.3333, 12.0000, 15.6667, 17.5000,  8.2500,
        10.0000, 21.0000, 22.0000, 14.3333, 20.5000, 18.0000, 18.3333,  5.0000,
        14.5000, 30.0000,  6.0000, 12.2000, 20.0000, 11.0000,  6.0000, 10.7500,
        18.0000,  1.0000,  7.0000, 11.0000, 22.0000,  7.0000, 13.3333, 23.0000,
        16.0000,  7.0000, 15.5000,  5.6667, 10.0000,  9.2500,  9.0000, 13.0000,
        14.3333, 11.0000, 27.0000, 10.6000,  6.0000, 18.0000, 16.0000, 20.6667,
        20.0000,  9.3333, 14.0000, 11.0000,  4.0000, 16.0000, 15.0000, 23.0000,
         9.0000, 24.0000,  7.0000, 17.2500,  8.6000,  9.7500, 17.2500,  9.0000,
         9.0000,  8.0000, 12.0000, 18.0000,  9.0000,  6.0000, 20.3333, 10.4000,
         2.0000, 14.6667, 19.0000, 20.3333, 20.6667, 11.3333, 15.0000,  5.0000,
         7.0000, 18.5000, 16.5000, 21.6000, 17.3333, 10.5000, 30.0000,  7.8000,
        26.3333, 23.0000, 14.0000, 12.0000, 14.4000, 10.0000,  5.4000, 16.0000,
        22.0000, 19.0000,  6.2500, 14.7500, 11.7500,  8.5000, 38.7500,  4.7500,
         3.0000,  9.7500,  9.0000,  2.0000, 15.5000, 12.0000, 26.0000,  6.5000,
        16.7500, 16.0000, 14.2500,  2.0000, 24.6667,  6.0000,  4.0000, 18.0000,
        10.0000, 20.0000,  9.7500, 13.6667,  4.0000, 14.0000, 18.0000, 13.7500,
         9.2500, 10.6667, 14.5000, 11.5000, 11.0000, 12.7500, 11.5000, 12.0000,
         1.0000, 17.6667,  8.0000,  8.5000, 14.0000, 19.0000, 22.0000, 13.5000,
        22.0000,  6.5000, 17.0000,  9.6667,  5.3333, 26.7500, 18.0000,  8.0000],
       dtype=torch.float64)}, 'races': {'tf': TensorFrame(
  num_cols=5,
  num_rows=22790,
  categorical (1): ['year'],
  numerical (1): ['round'],
  timestamp (2): ['date', 'time'],
  embedding (1): ['name'],
  has_target=False,
  device='cpu',
), 'time': tensor([983664000, 984873600, 986083200,  ..., 832464000, 952819200,
        955238400]), 'n_id': tensor([663, 664, 665,  ..., 586, 646, 648]), 'batch': tensor([  0,   0,   0,  ..., 488, 488, 488]), 'num_sampled_nodes': [0, 0, 22790]}, 'standings': {'tf': TensorFrame(
  num_cols=4,
  num_rows=21520,
  numerical (3): ['points', 'position', 'wins'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([ 983664000,  984873600,  986083200,  ..., -230169600, -228355200,
        -221184000]), 'n_id': tensor([24677, 24690, 24710,  ...,  6750,  6808,  6876]), 'batch': tensor([  0,   0,   0,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 21520, 0]}, 'results': {'tf': TensorFrame(
  num_cols=11,
  num_rows=19144,
  numerical (10): ['fastestLap', 'grid', 'laps', 'milliseconds', 'number', 'points', 'position', 'positionOrder', 'rank', 'statusId'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([ 983664000,  984873600,  986083200,  ..., -233798400, -230169600,
        -228355200]), 'n_id': tensor([17070, 17085, 17101,  ...,  2595,  2619,  2632]), 'batch': tensor([  0,   0,   0,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 19144, 0]}, 'constructors': {'tf': TensorFrame(
  num_cols=3,
  num_rows=1312,
  embedding (3): ['constructorRef', 'name', 'nationality'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([ 14,  78,   2,  ...,  64,  93, 173]), 'batch': tensor([  0,   1,   1,  ..., 511, 511, 511]), 'num_sampled_nodes': [0, 0, 1312]}, 'qualifying': {'tf': TensorFrame(
  num_cols=3,
  num_rows=2450,
  numerical (2): ['number', 'position'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([764640000, 766454400, 767664000,  ..., 901324800, 901929600,
        904348800]), 'n_id': tensor([  21,   50,   79,  ..., 1272, 1307, 1323]), 'batch': tensor([  4,   4,   4,  ..., 498, 498, 498]), 'num_sampled_nodes': [0, 2450, 0]}, 'constructor_standings': {'tf': TensorFrame(
  num_cols=4,
  num_rows=0,
  numerical (3): ['points', 'position', 'wins'],
  timestamp (1): ['date'],
  has_target=False,
  device='cpu',
), 'time': tensor([], dtype=torch.int64), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}, 'circuits': {'tf': TensorFrame(
  num_cols=7,
  num_rows=0,
  numerical (3): ['alt', 'lat', 'lng'],
  embedding (4): ['circuitRef', 'country', 'location', 'name'],
  has_target=False,
  device='cpu',
), 'n_id': tensor([], dtype=torch.int64), 'batch': tensor([], dtype=torch.int64), 'num_sampled_nodes': [0, 0, 0]}}, '_edge_store_dict': {('constructor_results', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'constructor_results'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructor_results', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'constructor_results'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'f2p_circuitId', 'circuits'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('circuits', 'rev_f2p_circuitId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('standings', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'standings'): {'edge_index': tensor([[    0,     1,     2,  ..., 21517, 21518, 21519],
        [    0,     1,     2,  ..., 21517, 21518, 21519]]), 'e_id': tensor([24677, 24690, 24710,  ...,  6750,  6808,  6876]), 'num_sampled_edges': [0, 21520]}, ('standings', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[    0,     1,     2,  ..., 21517, 21518, 21519],
        [    0,     0,     0,  ...,   511,   511,   511]]), 'e_id': tensor([24677, 24690, 24710,  ...,  6750,  6808,  6876]), 'num_sampled_edges': [21520, 0]}, ('drivers', 'rev_f2p_driverId', 'standings'): {'edge_index': tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 21517, 21518, 21519]]), 'e_id': tensor([  552,   553,   554,  ..., 20194, 20195, 20196]), 'num_sampled_edges': [0, 21520]}, ('results', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'results'): {'edge_index': tensor([[    0,     1,     2,  ..., 21516, 21517, 21518],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), 'e_id': tensor([17070, 17085, 17101,  ...,  2595,  2619,  2632]), 'num_sampled_edges': [0, 19144]}, ('results', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[    0,     1,     2,  ..., 19141, 19142, 19143],
        [    0,     0,     0,  ...,   511,   511,   511]]), 'e_id': tensor([17070, 17085, 17101,  ...,  2595,  2619,  2632]), 'num_sampled_edges': [19144, 0]}, ('drivers', 'rev_f2p_driverId', 'results'): {'edge_index': tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), 'e_id': tensor([  545,   546,   547,  ..., 17245, 17246, 17247]), 'num_sampled_edges': [0, 19144]}, ('results', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'results'): {'edge_index': tensor([[    0,     0,     0,  ...,  1310,  1310,  1310],
        [    0,     1,     2,  ..., 19141, 19142, 19143]]), 'e_id': tensor([ 6090,  6092,  6093,  ..., 17361, 17362, 17365]), 'num_sampled_edges': [0, 19144]}, ('qualifying', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'qualifying'): {'edge_index': tensor([[  205,   206,   207,  ..., 21008, 21009, 21011],
        [    0,     1,     2,  ...,  2447,  2448,  2449]]), 'e_id': tensor([  21,   50,   79,  ..., 1272, 1307, 1323]), 'num_sampled_edges': [0, 2446]}, ('qualifying', 'f2p_driverId', 'drivers'): {'edge_index': tensor([[   0,    1,    2,  ..., 2447, 2448, 2449],
        [   4,    4,    4,  ...,  498,  498,  498]]), 'e_id': tensor([  21,   50,   79,  ..., 1272, 1307, 1323]), 'num_sampled_edges': [2450, 0]}, ('drivers', 'rev_f2p_driverId', 'qualifying'): {'edge_index': tensor([[   4,    4,    4,  ...,  498,  498,  498],
        [   0,    1,    2,  ..., 2447, 2448, 2449]]), 'e_id': tensor([2865, 2866, 2867,  ..., 1615, 1616, 1617]), 'num_sampled_edges': [0, 2450]}, ('qualifying', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'qualifying'): {'edge_index': tensor([[  10,   10,   10,  ..., 1274, 1274, 1274],
        [   0,    1,    2,  ..., 2447, 2448, 2449]]), 'e_id': tensor([2416, 2419, 2421,  ..., 3540, 3543, 3544]), 'num_sampled_edges': [0, 2450]}, ('constructor_standings', 'f2p_raceId', 'races'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('races', 'rev_f2p_raceId', 'constructor_standings'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructor_standings', 'f2p_constructorId', 'constructors'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}, ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): {'edge_index': tensor([], size=(2, 0), dtype=torch.int64), 'e_id': tensor([], dtype=torch.int64), 'num_sampled_edges': [0, 0]}}}


