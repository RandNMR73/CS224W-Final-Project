Loading Database object from data/relbench/rel-f1/db...
Done in 0.10 seconds.
type(batch): <class 'torch_geometric.data.hetero_data.HeteroData'>
batch edge_index_dict: {('constructor_results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_results'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'f2p_circuitId', 'circuits'): tensor([], size=(2, 0), dtype=torch.int64), ('circuits', 'rev_f2p_circuitId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'standings'): tensor([[    0,     1,     2,  ..., 21203, 21204, 21205],
        [    0,     1,     2,  ..., 21203, 21204, 21205]]), ('standings', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 21203, 21204, 21205],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'standings'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 21203, 21204, 21205]]), ('results', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'results'): tensor([[    0,     1,     3,  ..., 21180, 21189, 21195],
        [    0,     1,     2,  ..., 18777, 18778, 18779]]), ('results', 'f2p_driverId', 'drivers'): tensor([[    0,     1,     2,  ..., 18777, 18778, 18779],
        [    0,     0,     0,  ...,   511,   511,   511]]), ('drivers', 'rev_f2p_driverId', 'results'): tensor([[    0,     0,     0,  ...,   511,   511,   511],
        [    0,     1,     2,  ..., 18777, 18778, 18779]]), ('results', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'results'): tensor([[    0,     0,     0,  ...,  1397,  1398,  1399],
        [    0,     1,     2,  ..., 18777, 18778, 18779]]), ('qualifying', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'qualifying'): tensor([[21239, 21240,   551,  ..., 21155, 21156, 21157],
        [    0,     1,     2,  ...,  1701,  1702,  1703]]), ('qualifying', 'f2p_driverId', 'drivers'): tensor([[   0,    1,    2,  ..., 1701, 1702, 1703],
        [  13,   13,   13,  ...,  507,  507,  507]]), ('drivers', 'rev_f2p_driverId', 'qualifying'): tensor([[  13,   13,   13,  ...,  507,  507,  507],
        [   0,    1,    2,  ..., 1701, 1702, 1703]]), ('qualifying', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'qualifying'): tensor([[  34,   34,   34,  ..., 1392, 1392, 1392],
        [   0,    1,    2,  ..., 1701, 1702, 1703]]), ('constructor_standings', 'f2p_raceId', 'races'): tensor([], size=(2, 0), dtype=torch.int64), ('races', 'rev_f2p_raceId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64), ('constructor_standings', 'f2p_constructorId', 'constructors'): tensor([], size=(2, 0), dtype=torch.int64), ('constructors', 'rev_f2p_constructorId', 'constructor_standings'): tensor([], size=(2, 0), dtype=torch.int64)}
batch_scuffed: HeteroData(
  _global_store={},
  _node_store_dict={
    constructor_results={
      tf=TensorFrame([0, 2]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    drivers={
      tf=TensorFrame([512, 6]),
      n_id=[512],
      batch=[512],
      num_sampled_nodes=[3],
      input_id=[512],
      seed_time=[512],
      batch_size=512,
      y=[512],
    },
    races={
      tf=TensorFrame([21861, 5]),
      time=[21861],
      n_id=[21861],
      batch=[21861],
      num_sampled_nodes=[3],
    },
    standings={
      tf=TensorFrame([21206, 4]),
      time=[21206],
      n_id=[21206],
      batch=[21206],
      num_sampled_nodes=[3],
    },
    results={
      tf=TensorFrame([18780, 11]),
      time=[18780],
      n_id=[18780],
      batch=[18780],
      num_sampled_nodes=[3],
    },
    constructors={
      tf=TensorFrame([1400, 3]),
      n_id=[1400],
      batch=[1400],
      num_sampled_nodes=[3],
    },
    qualifying={
      tf=TensorFrame([1704, 3]),
      time=[1704],
      n_id=[1704],
      batch=[1704],
      num_sampled_nodes=[3],
    },
    constructor_standings={
      tf=TensorFrame([0, 4]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    circuits={
      tf=TensorFrame([0, 7]),
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
  },
  _edge_store_dict={
    (constructor_results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, f2p_circuitId, circuits)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (circuits, rev_f2p_circuitId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, standings)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (standings, f2p_driverId, drivers)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, standings)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (results, f2p_driverId, drivers)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, qualifying)={
      edge_index=[2, 1699],
      e_id=[1699],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_driverId, drivers)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, qualifying)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, qualifying)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
  }
)
batch: HeteroData(
  constructor_results={
    tf=TensorFrame([0, 2]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  drivers={
    tf=TensorFrame([512, 6]),
    n_id=[512],
    batch=[512],
    num_sampled_nodes=[3],
    input_id=[512],
    seed_time=[512],
    batch_size=512,
    y=[512],
  },
  races={
    tf=TensorFrame([21861, 5]),
    time=[21861],
    n_id=[21861],
    batch=[21861],
    num_sampled_nodes=[3],
  },
  standings={
    tf=TensorFrame([21206, 4]),
    time=[21206],
    n_id=[21206],
    batch=[21206],
    num_sampled_nodes=[3],
  },
  results={
    tf=TensorFrame([18780, 11]),
    time=[18780],
    n_id=[18780],
    batch=[18780],
    num_sampled_nodes=[3],
  },
  constructors={
    tf=TensorFrame([1400, 3]),
    n_id=[1400],
    batch=[1400],
    num_sampled_nodes=[3],
  },
  qualifying={
    tf=TensorFrame([1704, 3]),
    time=[1704],
    n_id=[1704],
    batch=[1704],
    num_sampled_nodes=[3],
  },
  constructor_standings={
    tf=TensorFrame([0, 4]),
    time=[0],
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  circuits={
    tf=TensorFrame([0, 7]),
    n_id=[0],
    batch=[0],
    num_sampled_nodes=[3],
  },
  (constructor_results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_results)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, f2p_circuitId, circuits)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (circuits, rev_f2p_circuitId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, standings)={
    edge_index=[2, 21206],
    e_id=[21206],
    num_sampled_edges=[2],
  },
  (standings, f2p_driverId, drivers)={
    edge_index=[2, 21206],
    e_id=[21206],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, standings)={
    edge_index=[2, 21206],
    e_id=[21206],
    num_sampled_edges=[2],
  },
  (results, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, results)={
    edge_index=[2, 18780],
    e_id=[18780],
    num_sampled_edges=[2],
  },
  (results, f2p_driverId, drivers)={
    edge_index=[2, 18780],
    e_id=[18780],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, results)={
    edge_index=[2, 18780],
    e_id=[18780],
    num_sampled_edges=[2],
  },
  (results, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, results)={
    edge_index=[2, 18780],
    e_id=[18780],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, qualifying)={
    edge_index=[2, 1699],
    e_id=[1699],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_driverId, drivers)={
    edge_index=[2, 1704],
    e_id=[1704],
    num_sampled_edges=[2],
  },
  (drivers, rev_f2p_driverId, qualifying)={
    edge_index=[2, 1704],
    e_id=[1704],
    num_sampled_edges=[2],
  },
  (qualifying, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, qualifying)={
    edge_index=[2, 1704],
    e_id=[1704],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_raceId, races)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (races, rev_f2p_raceId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructor_standings, f2p_constructorId, constructors)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  },
  (constructors, rev_f2p_constructorId, constructor_standings)={
    edge_index=[2, 0],
    e_id=[0],
    num_sampled_edges=[2],
  }
)
batch_scuffed: HeteroData(
  _global_store={},
  _node_store_dict={
    constructor_results={
      tf=TensorFrame([0, 2]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    drivers={
      tf=TensorFrame([512, 6]),
      n_id=[512],
      batch=[512],
      num_sampled_nodes=[3],
      input_id=[512],
      seed_time=[512],
      batch_size=512,
      y=[512],
    },
    races={
      tf=TensorFrame([21861, 5]),
      time=[21861],
      n_id=[21861],
      batch=[21861],
      num_sampled_nodes=[3],
    },
    standings={
      tf=TensorFrame([21206, 4]),
      time=[21206],
      n_id=[21206],
      batch=[21206],
      num_sampled_nodes=[3],
    },
    results={
      tf=TensorFrame([18780, 11]),
      time=[18780],
      n_id=[18780],
      batch=[18780],
      num_sampled_nodes=[3],
    },
    constructors={
      tf=TensorFrame([1400, 3]),
      n_id=[1400],
      batch=[1400],
      num_sampled_nodes=[3],
    },
    qualifying={
      tf=TensorFrame([1704, 3]),
      time=[1704],
      n_id=[1704],
      batch=[1704],
      num_sampled_nodes=[3],
    },
    constructor_standings={
      tf=TensorFrame([0, 4]),
      time=[0],
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
    circuits={
      tf=TensorFrame([0, 7]),
      n_id=[0],
      batch=[0],
      num_sampled_nodes=[3],
    },
  },
  _edge_store_dict={
    (constructor_results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_results)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, f2p_circuitId, circuits)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (circuits, rev_f2p_circuitId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, standings)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (standings, f2p_driverId, drivers)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, standings)={
      edge_index=[2, 21206],
      e_id=[21206],
      num_sampled_edges=[2],
    },
    (results, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (results, f2p_driverId, drivers)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (results, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, results)={
      edge_index=[2, 18780],
      e_id=[18780],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, qualifying)={
      edge_index=[2, 1699],
      e_id=[1699],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_driverId, drivers)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (drivers, rev_f2p_driverId, qualifying)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (qualifying, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, qualifying)={
      edge_index=[2, 1704],
      e_id=[1704],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_raceId, races)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (races, rev_f2p_raceId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructor_standings, f2p_constructorId, constructors)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
    (constructors, rev_f2p_constructorId, constructor_standings)={
      edge_index=[2, 0],
      e_id=[0],
      num_sampled_edges=[2],
    },
  }
)
